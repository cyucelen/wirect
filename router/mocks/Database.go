package mocks

import mock "github.com/stretchr/testify/mock"
import model "gitlab.com/wirect/wirect-server/model"

import time "time"

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
	CreatedPackets []model.Packet
	Sniffers       []model.Sniffer
}

// CreatePacket provides a mock function with given fields: packet
func (_m *Database) CreatePacket(packet *model.Packet) error {
	ret := _m.Called(packet)

	_m.CreatedPackets = append(_m.CreatedPackets, *packet)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Packet) error); ok {
		r0 = rf(packet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSniffer provides a mock function with given fields: sniffer
func (_m *Database) CreateSniffer(sniffer *model.Sniffer) error {
	ret := _m.Called(sniffer)

	_m.Sniffers = append(_m.Sniffers, *sniffer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Sniffer) error); ok {
		r0 = rf(sniffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPacketsBySniffer provides a mock function with given fields: snifferMAC
func (_m *Database) GetPacketsBySniffer(snifferMAC string) []model.Packet {
	ret := _m.Called(snifferMAC)

	var r0 []model.Packet
	if rf, ok := ret.Get(0).(func(string) []model.Packet); ok {
		r0 = rf(snifferMAC)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Packet)
		}
	}

	return r0
}

// GetPacketsBySnifferSince provides a mock function with given fields: snifferMAC, since
func (_m *Database) GetPacketsBySnifferSince(snifferMAC string, since time.Time) []model.Packet {
	ret := _m.Called(snifferMAC, since)

	var r0 []model.Packet
	if rf, ok := ret.Get(0).(func(string, time.Time) []model.Packet); ok {
		r0 = rf(snifferMAC, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Packet)
		}
	}

	return r0
}

// GetSniffers provides a mock function with given fields:
func (_m *Database) GetSniffers() []model.Sniffer {
	ret := _m.Called()

	var r0 []model.Sniffer
	if rf, ok := ret.Get(0).(func() []model.Sniffer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Sniffer)
		}
	}

	return r0
}

// UpdateSniffer provides a mock function with given fields: sniffer
func (_m *Database) UpdateSniffer(sniffer *model.Sniffer) error {
	ret := _m.Called(sniffer)

	for i := range _m.Sniffers {
		if _m.Sniffers[i].MAC == sniffer.MAC {
			_m.Sniffers[i].Name = sniffer.Name
			_m.Sniffers[i].Location = sniffer.Location
		}
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Sniffer) error); ok {
		r0 = rf(sniffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
